#!/usr/bin/env python2

import argparse
import requests
import errno
import traceback
import sys
import os
from json import loads
from os.path import isfile, join, expanduser
from hashlib import sha256
from shutil import rmtree
from imp import load_source, new_module
from datetime import datetime
from tempfile import mkdtemp

# unconfigurable globals
kiwi_home_dir = join(expanduser("~"), '.kiwi')

class Kiwi:

	server = False

	class Runtime:
		client = "runtime/client.py"
		server = "runtime/server.py"
		module = "runtime/module.py"

	# configurable vars
	class Config:
		kiwi_repo_modules_dir = "modules/"
		kiwi_repo_api = "https://api.github.com/repos/isLonerism/kiwi/contents/"
		kiwi_repo_raw = "https://raw.githubusercontent.com/isLonerism/kiwi/master/"
		kiwi_local_modules_dir = join(kiwi_home_dir, "modules")
		kiwi_cache_updates = 'true'
		kiwi_cache_dir = None

	def __init__(self, config_path=None):

		# parse optional config
		if config_path and isfile(config_path):
			config = self.Helper.parse_config(config_path)

			# overwrite configurable variables if present
			for var in [attr for attr in self.Config.__dict__ if not attr.startswith("__")]:
				self.Config.__dict__[var] = config.get(var, self.Config.__dict__[var])

		# set cache updates string to boolean
		self.Config.kiwi_cache_updates = self.Config.kiwi_cache_updates.lower() == 'true'

		# init cache directory if needed
		if self.Config.kiwi_cache_updates is None:
			self.Config.kiwi_cache_dir = None
		elif self.Config.kiwi_cache_dir is None:
			self.Config.kiwi_cache_dir = mkdtemp()
		else:
			self.Helper.ensure_directory(self.Config.kiwi_cache_dir)

		# ensure kiwi directories exist
		self.Helper.ensure_directory(kiwi_home_dir)
		self.Helper.ensure_directory(self.Config.kiwi_local_modules_dir)

	def __del__(self):
		if self.Config.kiwi_cache_dir is not None:
			rmtree(self.Config.kiwi_cache_dir)

		self.Config.kiwi_cache_dir = None

	def get_installed_module_list(self):
		return [module for module in os.listdir(self.Config.kiwi_local_modules_dir)]

	def get_remote_module_list(self):
		return [module['name'] for module in loads(self.Helper.get(join(self.Config.kiwi_repo_api, self.Config.kiwi_repo_modules_dir)))]

	def get_module_description(self, module):
		try:
			# import the local module if present, remote if not present
			if module in self.get_installed_module_list():
				module_object = load_source(module, join(self.Config.kiwi_local_modules_dir, module, 'client.py'))
			else:
				module_object = new_module(module)
				exec self.Helper.get(join(self.Config.kiwi_repo_raw, self.Config.kiwi_repo_modules_dir, module, 'client.py')) in module_object.__dict__

			return module_object.kiwi_main.__doc__ if hasattr(module_object, 'kiwi_main') and module_object.kiwi_main.__doc__ else '[missing description]'

		except Exception as e:
			self.Helper.report(e)

	def fetch_modules(self, modules, update=False, quiet=False):
		modules_fetched = []
		modules_update = []
		modules_failed = []
		module_file = ('server' if self.server else 'client') + '.py'

		# redirect stdout on quiet mode
		terminal = sys.stdout
		devnull = open(os.devnull, 'w')
		if quiet:
			sys.stdout = devnull

		for index, module in enumerate(modules):
			
			print "[" + str(index + 1) + "/" + str(len(modules)) + "]",
			print "Fetching " + module + '...',
			sys.stdout.flush()

			self.Helper.ensure_directory(join(self.Config.kiwi_local_modules_dir, module))
			cached_filepath = join(self.Config.kiwi_cache_dir, module + '.' + module_file[:-3] + '.cached')
			local_filepath = join(self.Config.kiwi_local_modules_dir, module, module_file)

			try:
				# update from cached file
				if update and self.Config.kiwi_cache_updates and isfile(cached_filepath):
					with open(local_filepath, 'w') as current, open(cached_filepath, 'r') as cached:
						self.Helper.overwrite(current, cached.read())

					print 'Updated'
					modules_fetched.append(module)

				# get latest module
				else:
					latest = self.Helper.get(join(self.Config.kiwi_repo_raw, self.Config.kiwi_repo_modules_dir, module, module_file))

					# update / cache separately if module exists
					if isfile(local_filepath):
						with open(local_filepath, 'r') as current:
							if self.Helper.sha(latest) == self.Helper.sha(current.read()):
								print 'Up to date'
							else:
								if update:

									# reopen for writing
									current.close()
									current = open(local_filepath, 'w')
									self.Helper.overwrite(current, latest)

									print 'Updated'
									modules_fetched.append(module)
								else:
									if self.Config.kiwi_cache_updates:
										with open(cached_filepath, 'w') as cached:
											cached.write(latest)

									print 'Update available'
									modules_update.append(module)

					# write module
					else:
						with open(local_filepath, 'w') as module_local_file:
							module_local_file.write(latest)
						
						print 'Done'
						modules_fetched.append(module)

			except requests.exceptions.RequestException as e:
				self.Helper.report(e, 'download failed')
				modules_failed.append(module)
			except (IOError, OSError) as e:
				self.Helper.report(e)
				modules_failed.append(module)

		sys.stdout = terminal
		devnull.close()
		return modules_fetched, modules_update, modules_failed

	@staticmethod
	def say(jibberish, newline=True):
		print 'kiwi: ' + jibberish + ('\n' if newline else ''),

	# TODO implement
	def install(module, to_cache=False, from_cache=False):
		pass

	def take(self, module_path):

		module_full_path = join(kiwi_home_dir, module_path)

		if not isfile(join(kiwi_home_dir, module_path)):
			self.Helper.ensure_directory(join(kiwi_home_dir, "/".join(module_path.split("/")[:-1])))

			runtime_files = [value for attr, value in self.Runtime.__dict__.items() if not attr.startswith("__") and value != module_path]

			# check for runtime updates
			modules_to_update = []
			for _file in runtime_files:
				if isfile(join(kiwi_home_dir, _file)):
					with open(join(kiwi_home_dir, _file), 'r') as current_file:
						remote_file = self.Helper.get(join(self.Config.kiwi_repo_raw, _file))
					
						if self.Helper.sha(remote_file) != self.Helper.sha(current_file.read()):
							modules_to_update.append(_file)

							with open(join(self.Config.kiwi_cache_dir, _file.replace("/", "_") + ".cached"), 'w') as cached_file:
								cached_file.write(remote_file)

			# update outdated modules
			if modules_to_update:
				self.say("runtime must be updated.", False)

				if self.Helper.ask("Proceed?", ['y', 'n']) == 'y':
					for _file in modules_to_update:
						with open(join(self.Config.kiwi_cache_dir, _file.replace("/", "_") + ".cached"), 'r') as cached_file, open(join(kiwi_home_dir, _file), 'w') as current_file:
							self.Helper.overwrite(current_file, cached_file.read())

				else:
					sys.exit(0)

			# get missing module
			with open(module_full_path, 'w') as module_file:
				module_file.write(self.Helper.get(join(self.Config.kiwi_repo_raw, module_path)))

		return load_source("module", module_full_path)

	class Helper:

		module_name = None
		module_home = None

		def __init__(self, name):
			self.module_name = name
			self.module_home = join(kiwi_home_dir, "modules", name)

			self.ensure_directory(self.module_home)

		def write_crashlog(self, exception_type, exception, exception_traceback):

			dest = join(self.module_home, "crash.log")

			# append to file if it already exists
			open_mode = 'a' if isfile(dest) else 'w'

			try:
				with open(dest, open_mode) as crash_log:
					crash_log.write(datetime.now().strftime("%d/%m/%Y %H:%M:%S") + '\n')
					crash_log.write(''.join(traceback.format_tb(exception_traceback)))
					crash_log.write('{}: {}'.format(exception_type.__name__, exception))
					crash_log.write('\n'*2)
					return True
			except Exception as e:
				self.report(e, 'could not write crash log')
				return False

		@staticmethod
		def parse_config(path):
			args = {}

			with open(path, 'r') as args_file:
				for index, arg in enumerate(args_file):
					arg = arg.strip()
					try:
						# ignore lines that are empty or commented out
						if arg and arg[0] != '#':
							kv = arg.split('=', 1)
							args[kv[0].strip()] = kv[1].strip()

					# at this point any error is a syntax error
					except Exception as e:
						self.report(e, '{}: syntax error on line {}: "{}"'.format(path, index + 1, arg), True)

			return args

		@staticmethod
		def report(e, description=None, fatal=False):
			print 'Error:',
			print e if not description else '{} ({})'.format(description, e)
	
			if fatal:
				sys.exit(1)

		@staticmethod
		def sha(data):
			return sha256(data).hexdigest()

		@staticmethod
		def ask(query, options):
			while True:
				print '{} ({})'.format(query, '/'.join(options)),
				response = raw_input()
				if response in options:
					return response
		
		@staticmethod
		def get(url):
			response = requests.get(url)
			response.raise_for_status()
			return response.text

		@staticmethod
		def overwrite(file_, data):
			file_.seek(0)
			file_.truncate(0)
			file_.write(data)

		@staticmethod
		def ensure_directory(directory):
			# make sure given directory exists
			try:
				os.makedirs(directory)
			except OSError as e:
				if e.errno is not errno.EEXIST:
					self.report(e, 'could not create directory {}'.format(directory), True)

def main():

	"""
	I'm kiwi. I fetch, update and run kiwi modules.

	* To get a module, use 'kiwi -g [module]'
	* To run a module, use 'kiwi [module]'
	"""

	# init kiwi config
	kiwi = Kiwi(join(kiwi_home_dir, "kiwi.conf"))

	# no arguments passed
	if len(sys.argv) == 1:

		print main.__doc__
		print '\tTry getting and running the \'helloworld\' module!\n'

	# module execution
	elif len(sys.argv) > 1 and sys.argv[1][:1] != '-':
			kiwi.take(kiwi.Runtime.module).run(kiwi, sys.argv)

	# kiwi execution
	else:

		# parse args
		parser = argparse.ArgumentParser(description=main.__doc__,
										 formatter_class=argparse.RawDescriptionHelpFormatter)
		group = parser.add_mutually_exclusive_group()
		group.add_argument('-l', '--list-modules', action="store_true")
		group.add_argument('-g', '--get-modules', nargs='*')
		group.add_argument('-u', '--update-modules', nargs='*')
		group.add_argument('-U', '--self-update', action='store_true')
		group.add_argument('-s', '--server', action='store_true')
		args = parser.parse_args()

		# start kiwi server
		if args.server:
			kiwi.server = True
			kiwi.take(kiwi.Runtime.server).run(kiwi)

		# pass arguments to kiwi client
		else:
			kiwi.take(kiwi.Runtime.client).run(kiwi, args)

if __name__ == "__main__":
        main()
