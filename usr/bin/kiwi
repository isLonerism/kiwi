#!/usr/bin/env python2
# -*- coding: utf-8 -*-
import argparse
import importlib
import hashlib
import requests
import imp
import urllib2
import sys
import os
import errno

kiwi_local_modules_dir = "/etc/kiwi/modules/"
kiwi_repo_modules_dir = "etc/kiwi/modules/"
kiwi_repo_api = "https://api.github.com/repos/isLonerism/kiwi/contents/"
kiwi_repo_raw = "https://raw.githubusercontent.com/isLonerism/kiwi/master/"

def kiwisay(jibberish, newline=True):
	print 'kiwi: ' + jibberish + ('\n' if newline else ''),

def printline():
	print '-'*50

def module_exists(module):
	try:
		imp.find_module(module)
	except ImportError:
		return False
	return True

def get_module_list():
	return [module['name'][:-3] for module in requests.get(kiwi_repo_api + kiwi_repo_modules_dir).json()]

# TODO cache updates, delete cached file on update
def get_modules(modules, update=False, cache_updates=True, quiet=False):
	modules_fetched = []
	modules_update_available = []
	modules_current = 0

	terminal = sys.stdout
	devnull = open(os.devnull, 'w')
	if quiet:
		sys.stdout = devnull

        for module in modules:
		modules_current += 1

                if module[-3:] != '.py':
                        module = module + '.py'
		print "[" + str(modules_current) + "/" + str(len(modules)) + "]",
                print "Fetching " + module + '...',
		sys.stdout.flush()

		if os.path.isfile(kiwi_local_modules_dir + module):
			latest = requests.get(kiwi_repo_raw + kiwi_repo_modules_dir + module).text
			with open(kiwi_local_modules_dir + module, 'r+') as current:
				if hashlib.sha256(latest).hexdigest() == hashlib.sha256(current.read()).hexdigest():
					print 'Up to date'
				else:
					if update:
						current.seek(0)
						current.truncate(0)
						current.write(latest)
						print 'Updated'
						modules_fetched.append(module[:-3])
					else:
						print 'Update available'
						modules_update_available.append(module[:-3])
		else:
                	try:
                        	get_file(kiwi_repo_raw + kiwi_repo_modules_dir + module, kiwi_local_modules_dir + module)
				print 'Done'
				modules_fetched.append(module[:-3])
                	except requests.exceptions.HTTPError as e:
                        	print 'Error: {}'.format(e)
                	except (IOError, OSError) as e:
				sys.stdout = terminal
                        	report(e, 'could not write to file')
	sys.stdout = terminal
	return modules_fetched, modules_update_available

def report(e, description=None, fatal=False):
	print 'Error:',
	
	if description:
		print str(description) + " (ERRNO {}: {})".format(e.errno, os.strerror(e.errno))
	else:
		print os.strerror(e.errno)
	
	if fatal:
		exit()

def get_file(url, dest):
	response = requests.get(url)
	if response.status_code is not 200:
		raise requests.exceptions.HTTPError('file not found')
	else:
		with open(dest, 'w') as f:
			f.write(response.text)

def main():
	# Create modules directory
	try:
		os.makedirs(kiwi_local_modules_dir)
	except OSError as e:
		if e.errno is not errno.EEXIST:
			report(e, 'could not create modules directory {}'.format(kiwi_local_modules_dir), True)

	if len(sys.argv) > 1 and sys.argv[1][:1] != '-':
		module_name = sys.argv[1]
		sys.argv.pop(0)
		sys.path.append(kiwi_local_modules_dir)

                if not module_exists(module_name):
                        module_as_list = list()
                        module_as_list.append(module_name)
                        get_modules(module_as_list, quiet=True)
                        if not module_exists(module_name):
                                kiwisay("I don't have a module called '{}' :(".format(module_name))
                                exit()

                module = importlib.import_module(module_name)
                if hasattr(module, 'kiwi_main'):
                        try:
                                # print ''
                                # kiwisay("running module '{}'".format(module_name))
                                # printline()
                                module.kiwi_main()
                        except Exception as e:
                                # printline()
                                kiwisay("module '{}' crashed with the following exception:".format(module_name), False)
                                print e
                                return
                else:
                        kiwisay("'{}' is not my module (missing kiwi_main() method)".format(module_name))

                # printline()
                # print ''

	else:
		# Parse args
		parser = argparse.ArgumentParser('Kiwi (/ˈkiːwi/ KEE-wee) or kiwis are flightless birds native to New Zealand')
	        parser.add_argument('-m', '--module', type=str)
	        parser.add_argument('--list-modules', action="store_true")
	        parser.add_argument('--get-modules', nargs='*')
		parser.add_argument('--update-modules', nargs='*')
		args = parser.parse_args()
	
		if args.list_modules:
			print '\n'.join(get_module_list())
	
		if args.get_modules or args.update_modules:
			modules = args.get_modules if args.get_modules else args.update_modules

			if 'all' in modules:
	                	if len(modules) > 1:
					kiwisay("can't have 'all' argument with other modules listed")
	                        	print "Possible solutions:"
	                        	print "\t* kiwi {} all".format(sys.argv[1])
	                        	print "\t* kiwi " + sys.argv[1] + ' ' + ' '.join([module for module in modules if module != 'all'])
					return
	                	else:
	                        	modules = get_module_list()
	
			modules_fetched, modules_update_available = get_modules(modules, args.update_modules != None)

			if (args.get_modules):
				kiwisay('fetch results')
				print '\t* {} new modules fetched'.format(len(modules_fetched))
				print '\t* {} modules have an available update'.format(len(modules_update_available))
				print '\t* The rest of the modules are present and up to date'
	
				if len(modules_update_available) > 0:
					print 'Update the outdated modules? (y/n): ',
					if raw_input() == 'y':
						modules_fetched, modules_update_available = get_modules(modules_update_available, True)
					else:
						return

			kiwisay('update results')
			print '\t* {} modules were updated'.format(len(modules_fetched))
	
if __name__ == "__main__":
        main()
