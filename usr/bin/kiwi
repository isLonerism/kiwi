#!/usr/bin/env python2
# -*- coding: utf-8 -*-
import argparse
import importlib
import hashlib
import requests
import imp
import urllib2
import sys
import os
import errno

kiwi_local_modules_dir = "/etc/kiwi/modules/"
kiwi_repo_modules_dir = "etc/kiwi/modules/"
kiwi_repo_api = "https://api.github.com/repos/isLonerism/kiwi/contents/"
kiwi_repo_raw = "https://raw.githubusercontent.com/isLonerism/kiwi/master/"

def kiwisay(jibberish):
	print 'kiwi: {}'.format(jibberish)

def printline():
	print '-'*50

def module_exists(module):
	try:
		imp.find_module(module)
	except ImportError:
		return False
	return True

def get_module_list():
	return [module['name'] for module in requests.get(kiwi_repo_api + kiwi_repo_modules_dir).json()]

# TODO cache updates, delete cached file on update
def get_modules(modules, update=False, cache_updates=True):
	modules_fetched = []
	modules_update_available = []
	modules_current = 0

        for module in modules:
		modules_current += 1

                if module[-3:] != '.py':
                        module = module + '.py'
		print "[" + str(modules_current) + "/" + str(len(modules)) + "]",
                print "Fetching " + module + '...',
		sys.stdout.flush()

		if os.path.isfile(kiwi_local_modules_dir + module):
			latest = requests.get(kiwi_repo_raw + kiwi_repo_modules_dir + module).text
			with open(kiwi_local_modules_dir + module, 'r+') as current:
				if hashlib.sha256(latest).hexdigest() == hashlib.sha256(current.read()).hexdigest():
					print 'Up to date'
				else:
					if update:
						current.seek(0)
						current.truncate(0)
						current.write(latest)
						print 'Updated'
					else:
						print 'Update available'
						modules_update_available.append(module[:-3])
		else:
                	try:
                        	get_file(kiwi_repo_raw + kiwi_repo_modules_dir + module, kiwi_local_modules_dir + module)
				print 'Done'
				modules_fetched.append(module[:-3])
                	except requests.exceptions.HTTPError as e:
                        	print 'Error: {}'.format(e)
                	except (IOError, OSError) as e:
                        	report(e, 'could not write to file')
	return modules_fetched, modules_update_available

def report(e, description=None, fatal=False):
	print 'Error:',
	
	if description:
		print str(description) + " (ERRNO {}: {})".format(e.errno, os.strerror(e.errno))
	else:
		print os.strerror(e.errno)
	
	if fatal:
		exit()

def get_file(url, dest):
	response = requests.get(url)
	if response.status_code is not 200:
		raise requests.exceptions.HTTPError('file not found')
	else:
		with open(dest, 'w') as f:
			f.write(response.text)

def main():
	# Create modules directory
	try:
		os.makedirs(kiwi_local_modules_dir)
	except OSError as e:
		if e.errno is not errno.EEXIST:
			report(e, 'could not create modules directory {}'.format(kiwi_local_modules_dir), True)

	# Parse args
	parser = argparse.ArgumentParser('Kiwi (/ˈkiːwi/ KEE-wee) or kiwis are flightless birds native to New Zealand')
        parser.add_argument('-m', '--module', type=str)
        parser.add_argument('--list-modules', action="store_true")
        parser.add_argument('--get-modules', nargs='*')
	args = parser.parse_args()

	if args.list_modules:
		print '\n'.join(get_module_list())

	if args.get_modules:
		if 'all' in args.get_modules:
                	if len(args.get_modules) > 1:
				kiwisay("can't have 'all' argument with other modules listed")
                        	print "Possible solutions:"
                        	print "\t* kiwi --get-modules all"
                        	print "\t* kiwi --get-modules " + ' '.join([module for module in args.get_modules if module != 'all'])
				return
                	else:
                        	args.get_modules = get_module_list()
		modules_fetched, modules_update_available = get_modules(args.get_modules)
		kiwisay('fetch results')
		print '\t* {} new modules fetched'.format(len(modules_fetched))
		print '\t* {} modules have an available update'.format(len(modules_update_available))
		print '\t* The rest of the modules are present and up to date'

		if len(modules_update_available) > 0:
			print 'Update the outdated modules? (y/n): ',
			if raw_input() == 'y':
				get_modules(modules_update_available, True)

	if args.module:
		# Import module
		sys.path.append(kiwi_local_modules_dir)

		if not module_exists(args.module):
			module_as_list = list()
			module_as_list.append(args.module)
			get_modules(module_as_list)
			if not module_exists(args.module):
				kiwisay("I don't have a module called '{}' :(".format(args.module))
				exit()

		module = importlib.import_module(args.module)
		if hasattr(module, 'kiwi_main'):
			try:
				print ''
				kiwisay("running module '{}'".format(args.module))
				printline()
				module.kiwi_main(args)
			except Exception as e:
				printline()
				kiwisay("module '{}' crashed with the following exception:".format(args.module))
				print e, '\n'
				return
		else:
        		kiwisay("'{}' is not my module (missing kiwi_main(args) method)".format(args.module))

		printline()
		print ''
if __name__ == "__main__":
        main()
